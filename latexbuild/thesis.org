#+LaTeX_class: tesi_upf
#+OPTIONS: todo:nil
# #+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
# more: http://orgmode.org/manual/Export-settings.html

#+BEGIN_LATEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\documentclass[12pt, a4paper,twoside]{tesi_upf}

%CODIFICACIÓ
%\usepackage[latin1]{inputenc}
\usepackage[utf8]{inputenc}
%IDIOMES
\usepackage[catalan,spanish,english]{babel}

%NOMÉS PER A OBTENIR INDICACIÓ DEL MARC EN MIDA A4
%\usepackage[cam,a4,center,frame]{crop}

%PER A INCLOURE GRÀFICS I EL LOGO DE LA UPF
\usepackage{graphicx}
\usepackage{caption}
\usepackage{acronym}
\usepackage{multirow}
%FONTS TIMES O GARAMOND, 
\usepackage{times}
%\usepackage{garamond}
\usepackage{url}

\usepackage{pdfpages}
%SENSE HEADINGS: NO MODIFICAR
\pagestyle{plain}

%PER A L'ÍNDEX DE MATÈRIES
\usepackage{makeidx}
\makeindex

%ESTIL DE BIBLIOGRAFIA
\bibliographystyle{apalike}

%AQUEST DOCUMENT ÉS EN CATALÀ
\selectlanguage{english}

%EN COMPTES DE ÍNDEX, LA TAULA DE CONTINGUTS ES TITULA SUMARI
\addto\captionscatalan
  {\renewcommand{\contentsname}{\Large \sffamily Sumari}}

% ~~~~~~~~~~~~~~~~~~~~~~~~~~
% CUSTOM PACKAGES
% ~~~~~~~~~~~~~~~~~~~~~~~~~~
%\usepackage{hyperref}
\usepackage[hidelinks]{hyperref}
\usepackage{titlesec}
\setcounter{secnumdepth}{5}
% source: http://tex.stackexchange.com/questions/130795/
% it is already defined later
% \usepackage{pdfpages}

\usepackage{draftwatermark}
\SetWatermarkText{DRAFT}
\SetWatermarkLightness{0.95}

%AFEGIU EN AQUESTA PART LES VOSTRES DADES
%\title{Architecture Design of Real-Time Communication for Organizations with WebRTC}
\title{Real-Time Communication Network Architecture Design for Organizations with WebRTC}
%\subtitle{}
\author{Pedro Vílchez}
\thyear{2015}
\department{Departament de Tecnologies de la Informació i les Comunicacions (DTIC)}
\supervisor{Miquel Oliver, Victor Pascual}

\usepackage{pgfgantt}

\begin{document}

\pdfstringdefDisableCommands{%
\let\MakeUppercase\relax
}

\frontmatter

\maketitle

\cleardoublepage


%%%%%% Dedicatòria; si no es vol posar, comenteu fins a final de dedicatòria

\noindent Dedicated to my family.

\cleardoublepage

%%%%%% Final de dedicatòria


%%%%%% Agraïments; si no es vol posar, comenteu fins a final de agraïments
\noindent {\Large \sffamily Acknowledgments}
\\[12pt] 

Special thanks to Victor Pascual and Miquel Oliver for his mentorship. Thanks to Victor Oncins and Angel Elena (craem) for his feedback and help.

Thanks to Daniel Pocock for its work on rtcquickstart.org. Thanks to webrtchacks.com and all its team for the useful articles.

Thanks to all the people that works for the democratization of communications

Thanks for reading. Thanks for your time.

\cleardoublepage

%%%%%% Final dels agraïments

%ABSTRACT EN DOS IDIOMES. COM A MÍNIM CATALÀ. SI L'ALTRE ÉS EN CASTELLA CANVIEU EL QUE POSA ABSTRACT
\selectlanguage{english}
\section*{\Large \sffamily Abstract}

The present project introduces disrupting technology WebRTC (Web Real-Time Communication) which supports browser-to-browser applications without the need for third party plug-ins. It details how, since its release by Google in 2011, WebRTC is evolving and changing the way communications are understood. This project also discusses how to set up real-time communications in organizations with WebRTC, specifically the use cases of video and audio calls. The organization under discussion is Guifi.net and the elements analyzed are: requirements, network architecture design, component selection, implementation and demo.

%old
%The present project introduces the disrupting technology WebRTC (Web Real-Time Communication), that supports browser-to-browser applications without need of third party plugins. It is detailed how, since its release by Google in 2011, it is evolving and changing the way communications are understood. How to materialise a Real Time Communications in organizations with WebRTC and the use case of video and audio calls, taking as example Guifi.net and the opportunities that it offers: requirements, architecture design, component selection, implementation and demo.

\selectlanguage{catalan}
\vspace*{\fill}
\section*{\Large \sffamily Resum}

El projecte introdueix la tecnologia disruptiva WebRTC (comunicació web en temps real), que suporta aplicacions de navegador a navegador sense la necessitat de complements adicionals. Es detalla com, des de que va ser alliberat per Google al 2011, està evolucionant i canviant la forma en que les comunicacions són enteses. Aquest projecte també desenvolupa com posar en marxa comunicacions en temps real per organitzacions amb WebRTC, específicament els casos d'ús de trucades de veu i vídeo. La organització per desenvolupar-ho és Guifi.net i els elements que ho analitzen: requeriments, disseny d'arquitectura de xarxa, selecció de components, implementació i demostració.

%old
%Aquest projecte introdueix la tecnologia disruptiva WebRTC (comunicació web en temps real), que suporta aplicacions de navegador a navegador sense la necessitat de complements adicionals. Es detalla com, des de que va ser alliberat per Google al 2011, està evolucionant i canviant la forma en que les comunicacions són enteses. Com materialitzar les comunicacions en temps real en organitzacions amb WebRTC i el cas d'ús de trucades de veu i vídeo, prenent com exemple Guifi.net i les oportunitats que ofereix: requeriments, disseny d'arquitectura, selecció de components, implementació i demostració.

\selectlanguage{spanish}
\vspace*{\fill}
\section*{\Large \sffamily Resumen}

El proyecto introduce la tecnología disruptiva WebRTC (comunicación web en tiempo real), que soporta aplicaciones de navegador a navegador sin necesidad de complementos adicionales. Se detalla cómo, desde que fue liberado por Google en el 2011, está evolucionando y cambiando la forma en que son entendidas las comunicaciones. Este proyecto también desarrolla cómo poner en marcha las comunicaciones en tiempo real en organizaciones con WebRTC, específicamente los casos de uso de llamadas de voz y vídeo. La organización para desarrollarlo es Guifi.net y los elementos que lo analizan son: requerimientos, diseño de la arquitectura de red, selección de componentes, implementación y demostración.

%old
%Este proyecto introduce la tecnología disruptiva WebRTC (comunicación web en tiempo real), que soporta aplicaciones de navegador a navegador sin necesidad de complementos adicionales. Se detalla cómo, desde que fue liberado por Google en el 2011, está evolucionando y cambiando la forma en que son entendidas las comunicaciones. Cómo materializar las comunicaciones en tiempo real en organizaciones con WebRTC y el caso de uso de llamadas de voz y vídeo, tomando como ejemplo Guifi.net y las oportunidades que ofrece: requerimientos, diseño de la arquitectura, selección de componentes, implementación y demostración.

\vspace*{\fill}

\selectlanguage{english}
\cleardoublepage
%FIN DE ABSTRACTE

%PREFACI OPCIONAL. SI NO ES VOL, COMENTEU FINS EL FINAL DE PREFACI
%{\bf Prefaci}
%
%\cleardoublepage
%FINAL DE PREFACI


%TAULA DE CONTINGUTS: OBLIGATÒRIA
\selectlanguage{english}
\tableofcontents

%INDEX DE FIGURES; NOMÉS ES POSA SI HI HA FIGURES
\listoffigures
%Fa que aparegui al sumari
\addcontentsline{toc}{chapter}{List of figures}

%INDEX DE TAULES; NOMÉS ES POSA SI HI HA TAULES
\listoftables
%Fa que aparegui al sumari
\addcontentsline{toc}{chapter}{List of tables}

%COMENÇA EL TEXT
\mainmatter

% no indent for every new paragraph
%\setlength{\parindent}{0em}
% \linespread{1.5} % space between every new line 1.5 (I do not like)
% space between paragraphsx
%\setlength{\parskip}{\baselineskip}
#+END_LATEX

* TODO Introduction
A project presentation, motivation, objectives and outline of the chapters.
** Motivation

In my previous Bachelor's thesis \cite{vilchez2014comnet} I developed two ideas: /together we can build a commons network/ and /it is simple to start/. This project explores how to provide Real-Time Communications (RTC) to a commons network such as Guifi.net. Very few large cities have a commons network. Barcelona's commons network is called Guifi.net. However, the majority of Barcelona's population has no knowledge nor understanding of Guifi.net. Since the communications market is already highly commercial and competitive, users have a very wide choice of providers and therefore no need to think any further. In areas such as smaller cities and towns where large telecommunication companies have not invested in infrastructure, there is a far greater incentive to participate in a commons network.

# In my previous Bachelor's thesis \cite{vilchez2014comnet} I developed two ideas: /together we can build commons networks/ and /it is simple to start/. Even so, in cities like Barcelona many people do not have reason to understand what Guifi.net is, probably for two reasons: in cities the communications market is extremely competitive and to understand the commons model is complex for consumers. In areas where large operators has not invested, things are different: people lack internet, and they struggle to understand the commons model.

Inside a commons network, the implementation of other services besides Internet inherently adds value to the network and could help people understand its advantages. There are services based on contents which are difficult to maintain. But RTC as a service can be easily applied on a large scale. Once RTC has been set up, it is merely a question of time before people start using it. For various reasons a commons network generally functions within a narrow radius, and an RTC system could enhance social cohesion within the community.

To apply an RTC system to Guifi.net's commons network is a challenge. Attempts to implement an RTC system have failed. WebRTC is a new opportunity to try again.

** Objectives

- Free and secure communication between users via an RTC system and commons network infrastructure.
- Backward compatibility with VoIP[fn:11] network. Hence, users can communicate to other VoIP operators from inside and/or outside Guifi.net.
- Designing RTC network architecture to fit the commons network scenario.
- Ease of installation and use of RTC.

** TODO Outline

This document is organised in 5 chapters.

*Chapter [[Introduction]] Introduction* introduces the project. The motivation to start this project and the general objectives to achieve.

*Chapter [[Fundamentals of RTC]] Fundamentals of RTC* presents the basics of the concepts communications and real-time quality measurements.

*Chapter [[State of the art]] State of the art* discusses the state of the art of WebRTC and its associated technologies.

*Chapter [[Methodology]] Methodology* contains a description of the processes involved to achieve this project.

*Chapter [[Contributions and Results]] Contributions and Results* develops the theory and practice of the objectives proposed by this project   *FIX*

*Chapter [[Conclusions and Future Work]] Conclusions and Future Work* provides a general assessment of the project

* Fundamentals of RTC
The generic concepts and infrastructures that make possible real-time communications and important quality parameters to consider.
** Communications

In order to design communications in a system, the different elements must know what to do with the messages. That is why it is needed protocols. A protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or other event.

Real-time communications are even more complex, the information has to arrive fast and it is convenient to prepare the receiver of the communication. Signaling is the process of sending control information over networks to monitor, control, route, and set up sessions between devices. These sessions include video and audio conference calls, data sessions, video calls, and mobile and landline telephone calls. Signaling is also used to set up instant messaging and chat sessions. A signaling protocol, is a protocol that needs signaling features.

There are different approaches to achieve real-time systems, that is why it is needed compatibility between the systems. A gateway allows equipment with different protocols to communicate with one another. For example, gateways are used when incompatible video systems are used for a video conference.

It is also important how to transport the data, there are two fundamental approaches: circuit switching and packet switching.

*Packet switching and the Internet*. The messages are divided in appropriate sized chunks of data known as packets. Packets travel from the source through a network, when they arrive at its destination, the messages are reconstructed. The network makes its best effort to deliver packets in a timely manner, but it does not make any guarantees. Because the resources of the network are used on demand, not reserved, as a consequence, a packet may have to wait for access a communication link. Each packet could be routed in a different network path depending on the network state. Some of them could be lost if there is a congestion (a lot of traffic, a large number of packets). The network equipment needed to build a packet switching infrastructure is affordable, flexible and can manage easily a large amount of data (throughput). The internet is an example of a network of networks that consists of lots of private, public, academic, business, and government networks of local to global scope. The technical operation and standardization of the Internet is done with the RFCs[fn:23] (Request for Comments) and is an activity of the IETF (Internet Engineering Task Force). The protocol stack of the Internet is the TCP/IP stack, the name was given due to the importance of this two protocols on the system.
# https://en.wikipedia.org/wiki/Internet

*Circuit switching and traditional telephony*. The resource (a network path composed of communication channels between source and destination) is reserved for the duration of the communication session between the endpoints. In one hand, is a guaranteed constant transmission rate, good link quality, in the other hand, is an expensive resource that is being wasted in silent periods. One of the techniques used to reduce the silent periods is the multiplexing of the circuits in time (Time-Division Multiplexing, TDM) or frequency (Frequency-Division Multiplexing, FDM). The Public Switched Telephone Network (PSTN) is an example of an aggregate network operated by national, regional and local telephony operators that used this type of network paradigm in the past. Now it is moving towards a packet switching network. The technical operation of the PSTN uses the standards created by the ITU (International Telecommunication Union[fn:5]). The protocol stack of PSTN network is the SS7 stack (Signaling System No. 7). Later, it was added the possibility to include generic data to its networks with ISDN (Integrated Services Digital Network).
# https://en.wikipedia.org/wiki/Public_switched_telephone_network
# https://en.wikipedia.org/wiki/Integrated_Services_Digital_Network

IETF and ITU did efforts to adapt its networks to the requested uses: transport of generic data and real-time data. Internet is becoming the standard way to transport any kind of data. IETF did operations to include traditional telecommunication operators inside Internet, for example SIGTRAN[fn:6] family of protocols (compatibility with SS7 and ISDN stacks). There is also the Quality of Service (QoS) concept, that gives priority to chosen packets to arrive faster. That is why Internet can manage real-time data with reasonable delay.

# https://en.wikipedia.org/wiki/SIGTRAN

SS7, ISDN and TCP/IP stacks are based on the Open Systems Interconnection model (OSI model[fn:7]). Each protocol belongs to one layer. Each layer provides its service by performing certain actions within that layer and by using the services of the layer directly below it, this is called the service model. Table [[tab:ositcpip]] shows the difference between the and OSI model and the TCP/IP stack, each row is a layer. In TCP/IP, physical layer is implementated with hardware, for example with NIC (Network Interface Controller) or WNIC (Wireless Network Interface Controller), generally uses the IEEE 802 family, and its standardization is managed by IEEE (Institute of Electrical and Electronics Engineers.). Link layer is typically implemented by an element called switch, they provide close connectivity. Network layer is typically implemented by an element called router, they provide far connectivity. Session and presentation layers has to be implemented by the developer of the application ($\nearrow$).

# https://en.wikipedia.org/wiki/OSI_model

#+CAPTION: OSI, TCP layers and its description.
#+NAME: tab:ositcpip
| OSI layer    | Description                           | TCP/IP layer |
|--------------+---------------------------------------+--------------|
| Application  | Network and application services      | Application  |
| Presentation | Data format                           | $\nearrow$   |
| Session      | Signaling of data                    | $\nearrow$   |
| Transport    | Connection establishment side to side | Transport    |
| Network      | Logic addressing (far)                | Network      |
| Link         | Physical addressing (close)           | Link         |
| Physical     | Binary signal and transmission        | Physical     |

Table [[tab:pdu]] shows the name of each Protocol Data Unit (PDU), the most important protocols and the organization that standarizes it. At link layer the most common PDU is the Ethernet frame, with its associated MAC address (Media Access Control). At the network layer the datagram, with its associated IP address (Internet Protocol). The version 4 of IP, IPv4 \cite{rfc791}, contains $2^{32}$ (4.3 billion) addresses, as this is not enough, that is why Internet network is upgrading to IPv6 \cite{rfc2460} with $2^{128}$ (more than $7.9\cdot10^{28}$ times as many as IPv4). Meanwhile, there are basically two types of IPv4 addresses: private IP \cite{rfc1918}, not reachable via Internet, and public IP, reachable via Internet. It is difficult to remember IP addresses to access different locations, that is why there is DNS (Domain Name Server, \cite{rfc1034}), it associates human readable addresses (domain) to IPs. An IP adddress includes a port in the range of 0 to 65535, its main purpose is to share a single physical connection to another place (host), for example an IP destination can has more than one different services available; the different services is usually associated with a specific port. At the transport layer, one unreliable and fast protocol, UDP (User Datagram Protocol, \cite{rfc768}) and another reliable, TCP (Transmission Control Protocol, \cite{rfc793}). For the real-time topic, UDP is massively used in the real-time communication, because TCP favors reliability over timeliness. TCP is usually used for the signaling. At the application layer there are many possibilities, an example is the DNS, briefly described above.

# https://en.wikipedia.org/wiki/Port_(computer_networking)

#+CAPTION: PDU associated with each layer in TCP/IP model
#+NAME: tab:pdu
| TCP/IP layer | PDU                           | Standardization |
|--------------+-------------------------------+-----------------|
| Application  | Message                       | IETF            |
| Transport    | Datagram (UDP), Segment (TCP) | IETF            |
| Network      | Datagram or Packet (IP)       | IETF            |
| Link         | Frame (MAC)                   | IEEE            |

Every PDU has two types of fields: header and payload. A PDU is encapsulated with the layer below (see Figure [[fig:encap]]). If the header part is greater than payload part is called overhead. If it occurs, the communication is not very efficient, specially if they are sent lots of packets. Signaling data is overhead in the sense that it is not user data, but is useful to establish a call.

#+CAPTION: PDU encapsulation with IP and TCP protocols, application is not specified.
#+NAME: fig:encap
[[../img/encapsulation.png]]
# https://en.wikipedia.org/wiki/Protocol_data_unit#OSI_model

Before initializing a call is a requirement to convey media details to the participants, SDP (Session Description Protocol, \cite{rfc4566}) provides a standard representation for such information.

During a call, there is the RTP (Real-time Transport Protocol, \cite{rfc3550}). The majority of the RTP implementations are build on top of UDP. RTP is a protocol used to encapsulate multimedia content (audio, video). Its header contains a sequence number and timestamp. The sequence number increments by one for each RTP data packet sent, and may be used by the receiver to detect packet loss and to restore packet sequence. The timestamp registers the time when the RTP packet has been generated, it helps with the synchronization and jitter[fn:9] calculations. The RTP Control Protocol (RTCP) periodically sends packets with statistics information to participants in a streaming multimedia RTP session. RTP and RTCP provide information on the quality of communication but do nothing to fix or improve it. An application may use this information to control quality of service parameters. RTCP itself does not provide encryption[fn:13] or authentication methods. If they are needed, it is available the SRTP (Secure Real-time Transport Protocol, \cite{rfc3711}). 

# https://en.wikipedia.org/wiki/Real-time_Transport_Protocol
# RTCP https://en.wikipedia.org/wiki/RTP_Control_Protocol

More information about packet switching can be found at \cite{kurose2013net} and about general telecommunications and signaling at \cite{dodd2012telecom}. Some parts of that sources were included in this section.

** Real-time quality parameters

The network is defined as the router, switch and link components that interconnect all the path between receiver and its destination (them included). The real-time communication depends on how the network is affected by the following parameters.

The bandwidth is the number of bits[fn:10] that can arrive from the source to the destination through the network in one unit of time (for example, MB/s). A greater bandwidth delivers higher definition (better quality) of the media content. A packet can be lost if it is never received at the destination; it is represented by packet loss percentage (%). A communication suffers jitter when different packets arrive with different delays at its destination. It is defined delay as the time between transmitting the packet and arriving at its destination; it is represented by milliseconds (ms). Due to the nature of packet switching, packets can be delivered out of order. The arrived packet can present a corruption of data. The prior parameters presented affect negatively to the communication. Its undesirable effects might be silent lapses and interruptions of the communication.

Real-time data transport is managed with UDP. This protocol does not perform retransmission, it means that the communication should be fixed for the next upcoming packets. Real-time communications require low bandwidth and delay. This two requirements can be achieved easily with the technologies nowadays.

Some parts of \cite{velazquez2010voipguifi} and \cite{of2004voip} were included in this section. This sources are about voice and its quality, but it can be extended to certain forms of real-time video because of the improved technology nowadays.

* State of the art
Important mechanisms and different technologies that use WebRTC and other associated technologies such as SIP and XMPP

** Internet's evolution

The Internet is in constant evolution, and different mechanisms are necessary for solving problems affecting RTC.

Apart from IPv4 addresses to destination hosts, people can sign up with devices onto host services and be reachable via Internet. A clear example of this is the email system; bob@example.com means that the user, bob, is registered in the domain example.com that is reachable via Internet. DNS needs an additional parameter to reach bob; in the case of email the parameter is MX record (Mail eXchanger record, detailed in the SMTP[fn:15] standard \cite{rfc5321}). This is a resource record that specifies a mail server responsible for accepting email messages on behalf of a recipient's domain. To advertise other network services such as SIP and XMPP, the SRV record (SeRVice record, \cite{rfc2782}) is necessary. The NAPTR record (Name Authority PoinTeR, \cite{rfc3403}) allows a simple contact address such as bob@example.com to contain the available forms of contact and its priority to different services.

# http://en.wikipedia.org/wiki/MX_record
# http://en.wikipedia.org/wiki/SRV_record
# https://en.wikipedia.org/wiki/NAPTR_record
# http://anders.com/cms/264/

In the current upgrade from IPv4 to IPv6, NAT (Network Address Translation, \cite{rfc3235}) has been standarized in order to alleviate the scarcity and depletion of IPv4 addresses. NAT allows a public IP address to be reused among many different private networks (and its private IP addresses). It functions by connecting private local IP addresses and port tuples to one or more public IP addresses and port tuples. Unfortunately this introduces connectivity problems, especially in peer-to-peer connections[fn:8] (p2p). There are two server utilities which can be configured into a device to solve these problems. Both are required to be on the public network. A STUN server (Session Traversal Utilities for NAT, \cite{rfc5389}) allows a device to find out its public IP address if the device is located behind a NAT. STUN service keeps the NAT binding alive. A TURN server (Traversal Using Relays around NAT, \cite{rfc5766}) acts as a transport address intermediary between the two people wishing to communicate. Unlike STUN, TURN is resource-intensive for the provider. The problem with these two techniques is that they are optimal in some network topologies but a poor choice in others. That is why the most interesting solution for NAT traversal is ICE (Interactive Connectivity Establishment, \cite{rfc5245}). ICE exchanges, using the offer/answer SDP model, a multiplicity of IP addresses and ports, that includes STUN and TURN, which are then tested for connectivity by peer-to-peer connectivity checks. The best candidate transport address is then selected.

# http://en.wikipedia.org/wiki/STUN

The World Wide Web[fn:24], the Web, is the most common way to use the Internet. It has a client-server distributed architecture model[fn:25]. Web servers act as providers of resources or services and web browsers as client requesters. It means that it follows a request-response communication model: client requests and server responses. The browsers navigates between different web pages provided by the web servers. The web navigation could be unencrypted with HTTP[fn:12] (HyperText Transfer Protocol, \cite{rfc2616}) requests or encrypted with HTTPS (HTTP Secure, \cite{rfc2818}). The success of the Web is promoting the use of web applications for all possible services. Two important features of web applications are that they are cross-platform, the browser is a default application in most of the operating systems, and easy to update or upgrade, the browsers only has to refresh the page to obtain a new version. An important problem of the request-response communication model was its complexity associated to the use of bidirectional communication or streaming \cite{rfc6202}, for example to call through a browser. The solution is provided below, the Websocket protocol.

As Internet is such a vast, open and widely distributed network, it is therefore also open to undesirable consequences. For example, devices reachable via Internet are constantly attacked by other devices trying to exploit its weaknesses in computer systems and computer networks and thus can affect the security of an organization. For this and other reasons, its administrators deny by default any service which is not explicitly important to the organization. One of the components used to control the incoming and outgoing network traffic on an applied rule set is the firewall. But the firewall itself can also have undesirable consequences; in large organizations it can be less flexible. Take as an example a university with students interested in computers who are experimenting with services related to courses or projects; they may be having connectivity problems due to the restrictive nature of the firewall.

# https://en.wikipedia.org/wiki/Firewall_(computing)
# https://en.wikipedia.org/wiki/Hacker_(computer_security)

Another common mechanism to control the networks is the proxy. A proxy is a network entity that acts as an intermediary between two communication entities. A web proxy satisfies HTTP requests on the behalf of an origin web server. A proxy has the ability to inspect traffic flowing through the service, and can ensure no traffic flows through to the Internet without inspection or control.

# https://www.bluecoat.com/security/security-archive/2011-10-04/why-do-you-need-proxy-secure-web-gateway-0
# https://en.wikipedia.org/wiki/Client%E2%80%93server_model
# https://en.wikipedia.org/wiki/Web_server
# https://en.wikipedia.org/wiki/World_Wide_Web
# https://en.wikipedia.org/wiki/Proxy_server

Firewalls and web proxies commonly admit traffic via ports 80 (HTTP) and 443 (HTTPS). The Websocket protocol (WS, and WSS for Websocket Secured, \cite{rfc6455}) introduces bidirectional communication between a browser and a web server via ports 80, 443 or any other specified port. This provides websocket-based services an ability to traverse firewalls and proxies, and also prepares the way for a new generation of bidirectional applications, such as RTC.

# https://www.websocket.org/aboutwebsocket.html

# - LDAP ?

** Voice, video calls and instant messaging
# other title was "SIP and XMPP"
# the other title was "Voice and video calls"
# the other title was "Instant messaging"

There are two strong open standard alternatives to supply the use cases of voice, video calls and instant messaging: SIP and XMPP.

SIP (Session Initiation Protocol, \cite{rfc3261}) is a protocol used to establish, modify and terminate multimedia sessions in the Internet. It is one of the VoIP[fn:14] available services, an alternative to H.323 from the ITU. It is text-based, on a request/response transaction model from HTTP and SMTP; for example encrypted SIP is SIPS, and it has similarities to the relation between HTTP and HTTPS. SIP itself provides a TCP or UDP signaling channel, SDP to agree a media session and a RTP media channel. SIMPLE[fn:16] is a concluded workgroup at IETF that extended SIP with messaging and presence, this source offers an overview of the work done \cite{rfc6914}. Important telecommunication enterprises provides SIP trunking[fn:20] such as Telefonica[fn:17] and AT&T[fn:18]. SIP have hardware client implementations called SIP-based VoIP phones, and software client implementations called softphones. Old telephones can have a SIP conversion with ATA (Analog Telephone Adapter).

# http://tools.ietf.org/id/draft-rosenberg-sipping-siptrunk-00.txt

XMPP[fn:21] (Extensible Messaging and Presence Protocol), is a protocol to manage instant messaging and presence of your contact list, called roster in its terminology. It is defined in the IETF \cite{rfc6120} and the XEPs (XMPP Extension Protocols) are worked by the XMPP Standards Foundation[fn:22] (XSF). It is one of the IM (Instant Messaging) applications available. It encrypts its traffic with TLS such as SIP and HTTP. It is text-based streaming XML (Extensible Markup Language) data in close to real-time. XMPP itself provides a signaling channel, typically via the TCP. Jingle \cite{xep0166} is a signaling protocol that extends XMPP with audio and video calls and is designed to interwork with SIP through gateways. Massively used services provides XMPP-based solutions such as WhatsApp Messenger with 800 million monthly active users[fn:19]. The XMPP clients usually are implemented as a software device.

# http://xmpp.org/extensions/xep-0166.xml
# overview jingle http://xmpp.org/about-xmpp/technology-overview/jingle/
# http://xmpp.org/internet-drafts/draft-saintandre-jingle-sip-00.html

Because of firewalls and proxies, clients usually have connectivity problems connecting to SIP (port 5060) and XMPP services (port 5222). XMPP started using BOSH (Bidirectional-streams Over Synchronous HTTP, \cite{xep0124}), this had the problems of using HTTP for bidirectional communication. Now, with the standardization of Websocket protocol, there are SIP over websocket \cite{rfc7118} and XMPP over websocket \cite{rfc7395}.

** WebRTC
WebRTC is the technology able to make calls through the browser and real-time communications in general. In this section the two organizations working on WebRTC standardization, IETF and W3C, are presented. The different concepts laid out are inspired by the IETF Internet-Draft (IETF-ID) /Overview: Real Time Protocols for Browser-based Applications[fn:28]/.

WebRTC is a browser-embedded media engine released by Google in 2011. A media engine packages multimedia processing components into an optimized software solution for smoother integration and enhanced performance. WebRTC is also an effort by IETF and W3C to add standardized RTC capabilities into browsers. IETF RTCWEB[fn:26] Working Group is producing architecture and requirements for selection and profiling of the on-the-wire protocols. W3C WEBRTC[fn:27] Working Group is defining browser APIs to enable real-time communications in web browsers. IETF and W3Cs' work on WebRTC is still in progress. Figure [[fig:wrtcwp]] shows 
the parts played by the IETF and W3C in the browser model. The source[fn:29] is Victor Pascual's presentation of WebRTC.

# media engine definition http://en.wikipedia.org/wiki/Global_IP_Solutions
# what does IETF from charter: https://tools.ietf.org/wg/rtcweb/charters

#+CAPTION: WebRTC browser model
#+NAME: fig:wrtcwp
[[../img/webrtc-protocols.png]]
# source: WebRTC presentation of Victor Pascual

The WebRTC trapezoid architecture model (see figure [[fig:wrtca]]) shows the elements that make possible the communication between browsers. JS/HTML/CSS are the components to do a web application, it includes the WebRTC W3C APIs. It is required bidirectional communication channel between the web browser and the web server, it can be used an application-defined over Websocket Protocol such as: XMPP or SIP. The signaling path is composed by the communication channels used between entities participating in signaling. Once signaling is transferred, it starts a media path, a communication channel where multimedia content follows from one WebRTC device to another.

#+CAPTION: WebRTC trapezoid architecture model. Source: IETF WebRTC Overview
#+NAME: fig:wrtca
[[../img/webrtc-trapezoid.png]]
# source: https://tools.ietf.org/html/draft-ietf-rtcweb-overview-13#page-10

*Data transport* is defined in IETF-ID /Transports for WebRTC[fn:30]/. Generally, it is TCP for signaling channel and UDP for media channel. The WebRTC implementation could support accessing the Internet through an HTTP proxy with a /connect/ header as specified in IETF-ID /The ALPN HTTP Header Field[fn:45]/. It refers to IETF-ID: /DSCP and other packet markings for RTCWeb QoS[fn:41]/, about the usage of QoS with DSCP (Differentiated Services Code Points, \cite{rfc2474}).

*Data framing* is defined in /Web Real-Time Communication (WebRTC): Media Transport and Use of RTP[fn:31]/. Data framing is RTP traffic. RTP and RTCP must be multiplexed on a single transport-layer flow. It has to support the use of multiple media streams (simultaneous SSRC values) in a single RTP session, more information at IETF-ID /Sending Multiple Media Streams in a Single RTP Session[fn:42]/. WebRTC uses as RTP Profile the Extended Secure RTP Profile for RTCP-Based Feedback (RTP/SAVPF, \cite{rfc5124})\\

The complete specification of RTP for a particular application domain requires the choice of an RTP Profile.  For WebRTC use, the 
For non-RTP data, IETF-ID /WebRTC Data Channels[fn:34]/ defines generic transport service that allows browsers to exchange generic data from peer to peer. Additionally, the document discusses associated use cases and requirements. Data channels use SCTP (Stream Control Transmission Protocol, \cite{rfc4960}). It is a protocol that provides reliable or partially reliable message transport. A SCTP data channel has two streams with the same Stream Identifier, one in each direction, which are managed together. Stream Identifier uniquely identifies a stream. IETF-ID /WebRTC Data Channel Establishment Protocol[fn:35]/ (DCEP) is a protocol that establishes bidirectioanl data channels over an SCTP association with a consistent set of properties about how reliable it is wanted the transmission.

*Securing*. IETF-ID /Security Considerations for WebRTC[fn:32]/ analyzes the security threats of WebRTC. IP Location Privacy (section 5.4) is a threat that concerns the privacy-oriented usage of VPN tunnels to be anonymous in Internet. VPN (Virtual Private Network, \cite{rfc4026}), extends a private network (with private IPs) across a public network (with public IPs) through its. This security threat is caused by the ICE procedure because it reveals a lot of information about the callee's location; that is why it should be prevented in undesirable cases. Daniel Roesler provides a demo of this security threat[fn:46]. Cullen Jennings in a presentation[fn:48] said that it is only affected by split VPN tunnels, because it reveals both external interfaces.\\
IETF-ID /WebRTC Security Architecture[fn:33]/ defines a security architecture for WebRTC that takes in account the security threats of the other document. IP location privacy is out of scope. It defines the DTLS (Datagram Transport Layer Security, \cite{rfc4347}) handshake[fn:47]. It is a SCTP over DTLS (/DTLS Encapsulation of SCTP Packets[fn:49]/) for the data channel and a DTLS-SRTP \cite{rfc5763} for the media channel. The media channel or the data channel cannot be unencrypted. Once the DTLS handshake has completed, the keys are exported \cite{rfc5705} and used to key SRTP for the media channels.  DTLS fingerprints could be self-signed but it avoids a man-in-the-middle (MitM) attack if participants trust in a third party identity service or certificate authority.

# https://en.wikipedia.org/wiki/Virtual_private_network
# http://en.wikipedia.org/wiki/Split_tunneling

*Data formats*. IETF-ID /WebRTC Audio Codec and Processing Requirements[fn:36]/ proposes as required to implement the audio codecs G.711[fn:44], Opus \cite{rfc6716}. IETF-ID /WebRTC Video Processing and Codec Requirements[fn:37]/ proposes as required to implement the video codecs: H.264[fn:43], VP8 \cite{rfc6386}.

*Connection management* is defined in /Javascript Session Establishment Protocol[fn:38]/ (JSEP). It describes the mechanisms to control the signaling of a multimedia session and its relation with the W3C RTCPeerConnection API. To reduce its complexity it is recommended to adapt the JSEP API into an application-defined over Websocket Protocol library[fn:50], for example with XMPP or SIP. JSEP controls the signaling, particularly: (1) local and remote session descriptions with SDP and (2) participant's network addresses and ports available for the exchanging of real-time data (ICE). A simple example audio/video call is available at the Section 7 of the JSEP draft.

*Presentation and control*. W3C APIs define the user interaction with the browser. W3C Working Draft /WebRTC 1.0: Real-time Communication Between Browsers[fn:39]/ defines important API interfaces for WebRTC, the most relevant: (1) RTCPeerConnection in section 4 /Peer-to-peer connections/ allows browsers to communicate directly, (2) RTCSessionDescription (JSEP) in section 4.7 /Session Description Model/, (3) RTCDatachannel (data channel) in section 5 /Peer-to-peer Data API/ and (4) RTCStats in section 7 /Statistics Model/ is an evaluation tool of the communication.\\
W3C Working Draft /Media Capture and Streams[fn:40]/ defines the Media Capture API. It facilitates to the browser the management of local media devices such as audio and video.

*Local system support functions* improve the user experience. Examples of local functions are echo cancellation, volume control, camera focus, zoom, etc. Some of these functions are defined in Audio and Video Codec documents of IETF-ID and MediaStream API of W3C presented before.

The book \cite{wrtc2014loreto} was consulted as an additional source of information about WebRTC.
* Methodology
** SWOT analysis of WebRTC

An analysis of Strengths, Weaknesses, Opportunities and Threats (SWOT) will help the decision-making and tasks for the project.

- Strengths
  - Ease of use: real-time communication is supported without the need for additional applications or plug-ins.
  - It helps to solve connectivity problems caused by NAT, Firewall, etc.
  - Solved the problem of selection of video and audio codecs.
  - It is based on open standards and open source implementations.
  - It has well general acceptance in both worlds: enterprise and community.
  - The communication between peers is bidirectional and can be P2P
  - WebRTC standard does not specify signaling: it can be used in very different scenarios.
  - The communication channel between peers is encrypted
- Weaknesses
  - It is not implemented in all browsers.
  - The different browsers that implement WebRTC could have incompatibilities.
  - WebRTC has incompatibility at transport level with SIP, a gateway is needed.
  - Security compromised when using split VPN-tunnels, the IP address before the VPN-tunnel is exposed.
- Opportunities
  - WebRTC can be used in web based softphone for VoIP. Easy to install, easy to update.
  - A WebRTC audio call could be routed to traditional telephony.
  - It uses javascript as programming language, this language has the widest developer's community.
  - It encourages a new generation of web applications using its strenghts.
- Threats
  - WebRTC standard do not specify signaling: this can produce a positive or negative fragmentation of projects. Positive fragmentation: different projects for different applications. Negative fragmentation: divided effort.
  - Is a work in progress technology, it is being changed.

** Scope

There are lots of RTC systems for different purposes. This project focuses in the work of IETF organization and Internet. Guifi.net is part of Internet, and has additional constraints to take in account.

The following topics are worked only in its fundamentals: RTC standard systems from ITU[fn:5], referred to in the [[Fundamentals of RTC]], and XMPP, referred to in the [[State of the art]].

In general it has chosen technologies based on open standards, open source implementations and royalty free patent.

** Resources

There are costs related to the activity of this project in terms of equipment and human effort.

Table [[tab:eqre]] shows the equipment resources and its economic estimation. Observations:
- Guifi.net connectivity to Barcelona, a reachable IPv4 10.0.0.0/8[fn:1] has not direct cost.
- Nearly all software involved is open source and has no direct cost.
- Usually the cost of installation it’s greater or equal than the cost of equipment.

#+CAPTION: Equipment resources
#+NAME: tab:eqre
| Material                                   | Estimated cost (euro) |
|--------------------------------------------+-----------------------|
| Guifi.net equipments in my home            |                   200 |
| PC with virtualization capabilities [home] |                  1000 |
| Guifi.net equipments in university         |                  1000 |
| PC with Internet public IPv4 [university]  |                   300 |
| Laptop                                     |                   400 |
| ATA x 2                                    |                    60 |
| Old phone x 2                              |                     2 |
|--------------------------------------------+-----------------------|
| Total                                      |                  2962 |

# C-c + to sum all rows in a column
# S-insertchar to insert the result

The human effort part was financed by the university in the form of a grant to the author, representing a cost of 2800 euro. A bachelor’s thesis corresponds in Europe to 500 hours of work.

This implies a total cost of approximately 6000 euro

** Planning

The project can be separated in two phases. The first phase is a long preamble of studying VoIP and WebRTC. The second phase is an agile plan. Figure \ref{fig:gantt1} shows the two phases in a gantt chart.

# In the case of a pgfgantt, you have to create the "figure" inside
# to refer it, use a \ref instead of a orgmode local link
#+BEGIN_LATEX
\begin{figure}[htb]
\centering

\begin{ganttchart}[hgrid, vgrid]{1}{12}
\gantttitle{2014}{5}
\gantttitle{2015}{7} \\
\gantttitlelist{8,9,10,11,12,1,2,3,4,5,6,7}{1} \ganttnewline
\ganttbar{VoIP study}{2}{5} \ganttnewline
\ganttbar{WebRTC study}{6}{9} \ganttnewline
\ganttbar{Scrum plan}{10}{11}
\end{ganttchart}

\caption{\label{fig:gantt1}General gantt chart}
\end{figure}
#+END_LATEX

In the first phase, while studying VoIP the intention was to work about VoIP and Guifi.net. But Miquel Oliver encouraged me to do it about WebRTC. He presented me Victor Pascual, a SIP and WebRTC expert. It was hard to realise a convenient project, because this technology involves lots of protocols, other technologies, and it’s being modified now. In this phase It were settled the necessary
concepts to start the project.

The second phase is an agile plan, inspired by the Scrum methodology. Scrum is one of the Agile methods[fn:3] used for software development. The important fact is that promotes adaptive planning and flexible response to change. Scrum, particularly, is a general method that should be adapted to a concrete scenario.

The Scrum Team consists of a Product Owner, the Development Team, and a Scrum Master. The work of the scrum team according to the Scrum Guide[fn:2] is /deliver products iteratively and incrementally, maximizing opportunities for feedback. Incremental deliveries of "Done" product ensure a potentially useful version of working product is always available/. The roles are
- Product Owner: /is responsible for maximizing the value of the product and the work of the Development Team/
- Development Team: /consists of professionals who do the work of delivering a potentially releasable Increment of "Done" product at the end of each Sprint/
- Scrum Master: /is responsible for ensuring Scrum is understood and enacted/

/The heart of Scrum is a *Sprint*, a time-box of one month or less during which a "Done", usable, and potentially releasable product Increment is created/

*** Scrum plan

It is necessary to adapt the different concepts that comprise the scrum methodology for this particular project.

Roles:
- Product Owner (in some way, stakeholders): Mentors, University, people interested in the project. The author is interested in the output of the project because is volunteer in Guifi.net.
- Development Team: assumed by the author
- Scrum Master: assumed by the author, optionally could be assumed by mentors.

This means that the author has to see the project with different points of view.

The Sprint time is approximately one week, because it is assumed that the minimum time-box possible to do a release of the product is one week. The product comprise two major tasks: the theory (documentation, memory) and practice (how this theory is fitted to the real world experiments). The tasks are explained with more detail in the next section.

Figure \ref{fig:gantt2} shows the Scrum plan with the different sprint phases (s1, s2, s3, s4) and important milestones:
- d1: project charter and tasks, delivery to mentors
- d2: first consistent draft memory, delivery to mentors
- d3: set title and abstract to the thesis, delivery to university
- d4: thesis, delivery to assigned tribunal

#+BEGIN_LATEX
\begin{figure}[htb]
\centering

\begin{ganttchart}[
hgrid,
vgrid,
x unit=3.5mm,
time slot format=isodate
]{2015-05-12}{2015-06-18}
\gantttitlecalendar{year, month=name, week} \\
\ganttbar{s1}{2015-05-13}{2015-05-22} \ganttnewline
\ganttbar{s2}{2015-05-23}{2015-05-29} \ganttnewline
\ganttbar{s3}{2015-05-30}{2015-06-05} \ganttnewline
\ganttbar{s4}{2015-06-06}{2015-06-15} \ganttnewline
\ganttmilestone{d1}{2015-05-19} \ganttnewline
\ganttmilestone{d2}{2015-05-22} \ganttnewline
\ganttmilestone{d3}{2015-05-25} \ganttnewline
\ganttmilestone{d4}{2015-06-15}
\end{ganttchart}

\caption{\label{fig:gantt2}Scrum plan gantt chart}
\end{figure}

\vspace*{\fill}
#+END_LATEX

*** Metatools

To ensure the scrum plan and the project, different tools were used:
- Emacs orgmode: is a plain text syntax and software that facilitates different operations
  - nested concepts: It is possible to fold and unfold nested concepts different parts. This brings facilities to take different points of view of the project.
  - write the memory of the project and export to UPF publication constraints.
  - diary: used as autoevaluation tool. Time spent in some operations. Place to record when was discovered something.
  - tasks: to write things to do and mark them as TODO and DONE. To see overall progress of the project.
- Git: is a distributed version control system that helps to ensure the work is not lost. It can has a local and remote copy of all different states (commits) of the project. It is very flexible to do changes and apply.
- Github[fn:4] repository: is a social network that uses git and has the largest community. A place to host and share open source projects. This project is hosted as a repository in https://github.com/pedro-nonfree/guifi-webrtc. Featured files:
  - diary.org: record of activity in time
  - tasks.org: parts to do for the project
  - doc directory: independent parts written before starting the memory, or that needs isolation
    - doc/index.org: organise the different files of this directory
  - latexbuild directory: place where emacs orgmode thesis file is exported to latex and compiled to PDF
    - thesis.org: source code of memory
    - thesis.pdf: memory

** Tasks and work style

The tasks for this project are divided in two components: theory and practice.

Inside *theory*, there is:
- Documentation
  - Things to say/explain: what should be said that at the moment is missing (checklist)
  - Parts to fill: developed parts that are missing few details (checklist)
  - Parts to fix: developed parts that are incorrect and should be fixed (checklist)
  - Questions: related to the writing or the theory part, that it is needed an answer (checklist, done when answered)
  - Review: concepts that should be reviewed again, after a scheduled date (checklist)
  - Memory document has tools to track the state of different sections. For theory, it will be specially important:
    - Fundamentals
    - State of the Art
    - Result and Contributions
- Search of information
  - What things should be read (checklist).

Inside *practice*, there is:
- WebRTC POC: what WebRTC Proof Of Concepts that have been executed, and wishlist (checklist). What signaling was used. The POCs are web applications that have library linking with signaling. Interested in SIP (jssip) and XMPP (strophe) signaling.
- Tested components: what specific components that have been executed, and wishlist (checklist). LDAP Authentication, SSL/TLS certificates, STUN/TURN server, DNS.
# I don't know if I want to develop this for guifi
# - Develop DNS for guifi.net: is a major task that has to be achieved.

Figure [[fig:wsd]] shows the *work style*, how the objectives will be accomplished and its quality. Stable means that it should be clear and complete its content; best effort that it will work in the best way possible but with less priority:
- Requirements: use cases, constraints needed for the chosen organization. (quality: stable)
- Design: arquitecture design that fits the requirements. (quality: stable)
- Implementation: component selection, protocols (quality: best effort)
- PoC: applications that shows some of the results (quality: best effort)

# #+ATTR_LATEX: :width 5cm
#+CAPTION: Work style diagram
#+NAME: fig:wsd
[[../img/workstyle.png]]

* TODO Contributions and Results

*FILL*

# Analyzed elements for Guifi.net organization. 

# Definition of a general RTC service for Guifi.net organization, understood as a set of different services and application.

# organization

# Definition of a network network architecture of a general RTC service, as set of different services and applications.

** TODO Guifi.net network architecture
Guifi.net is a commons telecommunication network that is developed with an agreement that guarantees that the network is freely accessible, open to participation, open to knowledge and neutral in data transport. The network interconnects the people that takes part in it (the community) and facilitates the access to Internet. The guifi.net foundation gives legal support to the agreement and the network.

- *Government* is the guifi.net web application. Legal manager guifi.net Foundation[fn:62]
  - Open source project based on drupal[fn:54] v6
  - Manage IPv4 unique addresses
  - The best place to make something standard or easy to use. Example: unsolclic, easy configuration of devices

- *Social* architecture
  - *Community*: all the people that have access to the guifi.net network
  - *Zone*: geographic place where there are different *organizations*
    - *Volunteer*: no SLA (Service-Level Agreement)
    - *Association*: group of volunteers and professionals
    - *Freelance professional*: SLA
    - *Company*: group of professionals. SLA

- *Technical* architecture in a zone
  - /Mesh/ - modern routing protocols
    - *design*: each node extends the network
    - *firmware*: open source, based on OpenWrt[fn:61]. Most used:
      qMp[fn:57] and libremesh[fn:58].
    - *common internet sharing* through layer 3 tunnels or direct access
    - *routing*
      - bmx6[fn:59] (qMp or libremesh): Works at layer 3. Autodiscover neighbors
      - batman-adv[fn:60] (libremesh): Works at layer 2 with linux kernel
        features. It is like a distributed switch, no problem with
        mobility
  - /Infrastructure/ - traditional routing protocols
    - *design*
      - supernode: extends the network, conform a backbone network
      - node or client node: connects to a supernode
    - *firmware*: factory, examples: AirOS from Ubiquiti[fn:55]) and RouterOS from Mikrotik[fn:56].
    - *common internet sharing* through HTTP proxy (specific ports), or application layer tunnels such as OpenVPN
    - *routing*
      - BGP \cite{rfc1267}, each supernode is an Autonomous System (AS). An Autonomous System 
      - BGP for messages that goes inside or outside the AS, OSPF \cite{rfc2328} inside the AS

# https://en.wikipedia.org/wiki/Autonomous_system_(Internet)

# DNS architecture dnsservices. MX record. Missing SRV for XMPP and SIP

#+CAPTION: MX record in Guifi.net web
#+NAME: fig:guifi-mx
[[../img/guifi-mx.png]]

# LINKS

The vast majority of communication links are wireless, but there are some places where Guifi.net has deployed optical fiber. Also, in large cities such as Barcelona there are GRE-based (Generic Routing Encapsulation, \cite{rfc2784}) tunnels to improve connectivity using optical fiber services of ISP (Internet Service Provider). Figure [[fig:wifitech]] shows 802.11 Wi-Fi technologies. *FILL (802.11n is common, ac no, distance of wifi)*. The source is from section 4.2.3.1 of IRTF Internet-Draft /Alternative Network Deployments. Taxonomy and characterization[fn:51]/. This draft document is a work in progress of GAIA Research Group[fn:52][fn:53] (Global Access to the Internet for All) from IRTF. IRTF (Internet Research Task Force) is a research organization parallel to IETF.

#+CAPTION: 802.11 (Wi-Fi) Technologies
#+NAME: fig:wifitech
[[../img/wifitech.png]]

More information about Guifi.net network can be found in the first chapters at \cite{vilchez2014comnet}
** TODO Requirements
*** TODO Network requirements
*QoS*. Currently is complex to apply QoS in Guifi.net because of the difficulty to set up globally, firmware incompatibilities and lack of interest. Nearly all Guifi.net operators offering VoIP have deployed QoS with RouterOS in the parts of the network where they manage.

# delay requirements
*Delay*.
- According to \cite{videoip2008}, for interactive video, delay in each direction should be below 150 msec and normally must be below 400 msec. For one-way applications, delay is usually not a significant factor
- According to G.114[fn:63], for audio, if delays were kept below 150 ms, then most applications would not be significantly affected. While delays above 400 ms are unacceptable for general network planning purposes
- For communications, audio is more important than video

# http://en.wikipedia.org/wiki/Latency_(audio)

*Jitter*


# jitter requirements
# gráficas de enlaces wifi

# mejor candidato:
# http://guifi.net/guifi/graph_detail?type=pings&node=28151&device=66650
# http://guifi.net/node/28151
# 
# traceroute to 10.228.199.161 (10.228.199.161), 30 hops max, 60 byte packets
#  1  10.138.27.97 (10.138.27.97)  0.605 ms  4.788 ms  4.787 ms
#  2  172.25.35.229 (172.25.35.229)  4.801 ms  4.796 ms  4.783 ms
#  3  10.138.27.225 (10.138.27.225)  4.699 ms  4.757 ms  6.869 ms
#  4  10.138.27.33 (10.138.27.33)  7.172 ms  7.667 ms  7.875 ms
#  5  10.228.201.193 (10.228.201.193)  9.710 ms  9.979 ms  10.195 ms
#  6  10.228.199.193 (10.228.199.193)  12.400 ms  6.564 ms  8.140 ms
#  7  10.139.95.97 (10.139.95.97)  10.232 ms  10.253 ms  10.603 ms
#  8  10.228.199.161 (10.228.199.161)  16.250 ms  17.035 ms  17.296 ms
# http://10.228.203.232/cgi-bin/smokeping.cgi?target=guifi.WebUPF


# codec's Bandwidth

*Audio and Video Codecs' Bandwidth*.

- G.711, 64 Kbps bitrate (8 kHz sampling frequency x 8 bits per sample)
- Opus, according to \cite{rfc6716}, scales from low bitrate narrowband speech at 6 Kbps to very high quality stereo music at 510 Kbps

#+CAPTION: MPEG Video Compression Comparison
#+NAME: tab:videobw
|              | MPEG-1    | MPEG-2  | MPEG-3    | MPEG-4       |
|              |           |         |           | AVC/H.264    |
|--------------+-----------+---------+-----------+--------------|
| Common       | 500-      | 2.5-    | 100 Kbps- | 1-4 Mbps SD  |
| stream rates | 1500 Kbps | 50 Mbps | 10 Mbps   | 4-10 Mbps HD |

- SD: Video image with a resolution defined in standards popularized in the 1950s and widely used for television around the world
- HD: Video image with resolution greater than standard definition. Typical formats include 720-line progressively scanned images, 1080-line interlaced images, and other formats.

- VP8 is similar to H.264

Extract from Table 4-6 of \cite{videoip2008}.

# videos de youtube como ejemplo, TODO change Test
# practical example
# Source: https://www.youtube.com/watch?v=BdYKR1RsYFY
# Youtube video option /Stats for nerds/

This refers to Figure \ref{fig:test}

#+BEGIN_LATEX
\begin{figure}[htb]
\centering
\begin{tabular}{l}
\includegraphics[scale=0.85]{../img/yt144p.png}\\
\includegraphics[scale=0.85]{../img/yt360p.png}\\
\includegraphics[scale=0.85]{../img/yt1080p.png}\\
\end{tabular}
\caption{\label{fig:test}Test bla bla bla bla bla.}
\end{figure}
#+END_LATEX

# I used the export of tab:test, changing table to figure. (I don't like to see image grid as table.)
# #+MACRO:  p   \includegraphics[scale=0.85]{$1}
# #+CAPTION: Test.
# #+NAME: tab:test
# | {{{p(../img/yt144p.png)}}}  |
# | {{{p(../img/yt360p.png)}}}  |
# | {{{p(../img/yt1080p.png)}}} |
# refs to this
# http://stackoverflow.com/questions/22732261/how-to-create-image-grid-with-org-mode-for-latex-export
# http://thread.gmane.org/gmane.emacs.orgmode/84372

vs bandwidth in 802.11 links

*** Generic use cases
The use cases developed are those that are bold.

Definitions:
- Actors or Roles have a *user* and/or *admin* account. The user has minimum permissions in the application, the admin has all the permissions in the application. It can be defined one or more middle actors that have more permissions than user and less permissions than admin.
- A *call* refers to an audio or video call, bidirectional communication with video and/or audio channel.
- A user is *available* if is connected to the service and busy.

A general RTC service could be defined as it follows:
1. *Send calls: a user calls another user with an audio channel. Optional channels of communication if available: video and chat.*
   - Access to the service through an application.
   - Authentication.
   - Decision of which user it is wanted to call.
   - The call is accepted by the other user.
   - Bidirectional communication.
   - One of the two users stop the communication.
2. *Receive calls: a user receives a call only if is connected to the service with at least one device and is available.*
   - Access to the service through an application.
   - Authentication.
   - A lapse of random time until a call is received. If there are more devices of the same user, all of them receive the call, but only one can accept it.
   - The call is accepted.
   - Bidirectional communication.
   - One of the two users stop the communication.
3. A user can subscribe or unsubscribe to the RTC service.
4. Call history: a user can see the calls sent, received, missed. He can delete it.
5. Missed call notification
   - When a user calls to another user that is not available. A "missed call" notification is generated to be delivered to the other user.
   - A user has been notified by a missed call if the device is compatible with this service and he is available.
6. Contact list
   - A user can see the status (online, offline, busy, etc.) of another user in its contact list if he is allowed by the other user.
   - A user can add or remove another user from the contact list.
7. Chat rooms
   - A user can be in a public place where there are rooms and people talk openly.
   - A user can speak privately to the users connected to this place.
   - The identity in the chat room is the same as in the contact list.
8. User preferences
   - User can set its own photo, nickname and description.
   - Users can set if a room is able to record a history conversation (and files) such that users that connect and disconnect can follow the conversation.
   - User can change password of its account.
9. Share advanced media
   - User can share its screen with another user.
   - User can share files of limited size in a room or privately to another user. The data is temporarily stored.
   - Share N streams to N users (Multiuser bidirectional videoconference).
   - Share one stream to N users (Streaming).
10. Administration
    - User can only change its settings. Admin can change configuration of all users.
    - Users can report other users because of a social conflict, admin is notified.
11. *Integration: all the services are integrated and is the same account.*

*Guifi.net service* is defined as it follows:

1. A user can connect to a server if he could reach it with good quality, if not, he can easily install it in its zone.
2. If a server reach another, the users of a server can communicate to the users of another server.
3. The service is compatible with VoIP Guifi.net project.

*** Required components by specific use cases

This section presents the components required for the network architecture design. Concretely the requirements to send, receive calls, subscribe, unsubscribe and have integration are described now. For a WebRTC scenario, the components are distributed.
- Application interface: gives appropriate interaction to the actors in order to perform the different operations. Is distributed, a web server (WSRV) offering a page, and a client executing the web application (WAPP) through the web browser.
- Authentication service (AUTH): restricts access of service only to permitted users. Differentiate available operations depending on if is user or admin. Single sign on, after the web page is accessed, the user can operate.
- Signaling protocol (SIG): manages the side to side connections and logic to establish the call. The two peers must use a compatible signaling protocol.
- Transport protocol (TP): used between users and between user and server. Compatible, secure if possible.
- Database (DB): stores and encrypts personal information or preferences for a particular user. Accessible through web application if succeed in authentication.
- Connectivity solver (CS): a set of tools to avoid common communication problems that appear in networking scenarios. The most common problems are NAT and firewall.
- Gateway (GW): adapts or converts the communication to work with different communication systems. The most important difference between communication systems is the signaling protocol.

** TODO Network architecture design

*** General
- network architecture
  - structure: nodes, connections, relationships
  - behavior: protocols, functionality
  - production and deployment plans
- network architecture features
  - centralization vs. distribution
  - open vs closed
  - availability
  - scalability
    - extendability
  - control
    - security
- network architectures (guifi)
- signaling types

*** Component diagram?
/general diagrams/

Each link has associated transport protocol

#+CAPTION: Component Diagram
#+NAME: fig:compdiag
[[../img/arch.png]]

# sources from openclipart.org
# - computer: https://openclipart.org/detail/159709/laptop
# - server: https://openclipart.org/detail/13178/server
# - telephone: https://openclipart.org/detail/192858/voip-phone

/flow chart communication/

*** Interaction between WebRTC and SIP

Authentication
/authentication diagrams/

Gateway
/gateway diagrams/ 

#+CAPTION: SDP exchange during SIP signaling
#+NAME: fig:compdiag
[[../img/gw-sdp-exchange.png]]

#+CAPTION: SIP transport
#+NAME: fig:compdiag
[[../img/gw-sip-transport.png]]

#+CAPTION: Transport
#+NAME: fig:compdiag
[[../img/gw-transport.png]]

SRTP vs SDES ?

** TODO Component selection

** TODO Applications available
*** POCs

** TODO Implementation
** TODO /Demo/
* TODO Conclusions and Future Work
** TODO Conclusions
# What is an organization? this applied to guifi.net, but with a similar approach is applied to other open source communities, enterprises, etc.

** TODO Future Work
CUSAX \cite{rfc7081} /as easy as 2 iframes/

# Jingle standard said that is difficult a client that do sip and xmpp, not anymore!
* Fake
[To be removed]

Fake section to put the last latex code of the document
#+BEGIN_LATEX
\bibliography{bibliography}
\cleardoublepage



\backmatter
\printindex





\end{document}


%NUMERACIÓ DE LA PÀGINA EXTERIOR EXCEPTE EN LA PRIMERA PÀGINA DE CADA CAPÍTOL
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyfoot{}
\fancyfoot[RO]{\thepage}
\fancyfoot[LE]{\thepage}


%MUTIPLES ÍNDEX
%En el preàmbul
\usepackage{multind}
\makeindex{authors}
%Introducció d'entrades la forma
\index{authors}{Einstein}
%Situació de l'Índex
\printindex{authors}{Author index}
%Cal eliminar les comandes \usepakage{makeidx} \makeindex \printindex
%cal exacutar des de la línia de comandes makeindex authors
#+END_LATEX

* Footnotes

[fn:1] Range of IP's used by Guifi.net and private networks.

[fn:2] http://www.scrumguides.org/docs/scrumguide/v1/scrum-guide-us.pdf.

[fn:3] There are different metodologies grouped into agile. The process started with the write of the Agile Manifesto (12 principles) http://agilemanifesto.org/iso/en/principles.html. Since February 2001, this manifesto remains unchanged.

[fn:4] The web implementation is proprietary software, but it can be easily migrated to other open source tools such as http://gitlab.com or http://gogs.io/.

[fn:5] Formerly the International Telegraph Union.

[fn:6] Derived from signaling transport, working group of IETF.

[fn:7] ISO/IEC 7498-1:1994.

[fn:9] Jitter is briefly defined in the next section.

[fn:10] A bit can be 0 or 1. A stream of this symbols represents information. In telecommunications the information unit is the bit, expressed with the unit b. In computer science the Byte, expressed with the unit B. 1 Byte is 8 bits. 

[fn:11] Voice over IP. The use of telephone adapted to the Internet network.

[fn:8] A connection that goes directly from a host to another host, without an intermediate server.

[fn:12] HTTP is a coordinated effort by the IETF and the World Wide Web Consortium (W3C).

[fn:13] An encryption system guarantees privacy, only authorized participants can read the content.

[fn:14] Voice over IP, allows telephone calls via Internet.

[fn:15] Simple Mail Transfer Protocol, defines the electronic mail (e-mail) transmission.

[fn:16] SIP for Instant Messaging and Presence Leveraging Extensions https://tools.ietf.org/wg/simple/.

[fn:17] https://www.globalsolutions.telefonica.com/en/wholesale/products-services/global-voice/sip-trunking/.

[fn:18] http://www.business.att.com/enterprise/Service/voice-services/null/sip-trunking.

[fn:19] https://www.facebook.com/jan.koum/posts/10153230480220011.

[fn:20] SIP trunking means interconnection to an operator through SIP.

[fn:21] Formerly the protocol was originally named Jabber.

[fn:22] Formerly the Jabber Software Foundation.

[fn:23] In this document each IETF protocol is accompanied by its RFC.

[fn:24] An information system for interlinked hypertext documents and other digital resources that are accessed via the Internet

[fn:25] http://www.w3.org/Proposal.html

[fn:26] https://tools.ietf.org/wg/rtcweb/

[fn:27] http://www.w3.org/2011/04/webrtc/

[fn:28] https://tools.ietf.org/html/draft-ietf-rtcweb-overview-13

[fn:29] http://www.slideshare.net/victorpascual/webrtc-standards-update-october-2014/4

[fn:30] https://tools.ietf.org/html/draft-ietf-rtcweb-transports-08

[fn:31] https://tools.ietf.org/html/draft-ietf-rtcweb-rtp-usage-23

[fn:32] https://tools.ietf.org/html/draft-ietf-rtcweb-security-09

[fn:33] https://tools.ietf.org/html/draft-ietf-rtcweb-security-arch-11

[fn:34] https://tools.ietf.org/html/draft-ietf-rtcweb-data-channel-13

[fn:35] https://tools.ietf.org/html/draft-ietf-rtcweb-data-protocol-09

[fn:36] https://tools.ietf.org/html/draft-ietf-rtcweb-audio-07

[fn:37] https://tools.ietf.org/html/draft-ietf-rtcweb-video-05

[fn:38] https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-09

[fn:39] http://www.w3.org/TR/2015/WD-webrtc-20150210/

[fn:40] http://www.w3.org/TR/2015/WD-mediacapture-streams-20150414/

[fn:41] https://tools.ietf.org/html/draft-ietf-tsvwg-rtcweb-qos-03

[fn:42] https://tools.ietf.org/html/draft-ietf-avtcore-rtp-multi-stream-07

[fn:43] https://www.itu.int/rec/T-REC-H.264-201402-I/en

[fn:44] https://www.itu.int/rec/T-REC-G.711-198811-I/en

[fn:45] http://tools.ietf.org/html/draft-ietf-httpbis-tunnel-protocol-04

[fn:46] https://diafygi.github.io/webrtc-ips/

[fn:48] https://www.terena.org/activities/tf-webrtc/meeting2/slides/20150509-Cisco-WebRTC.pdf

[fn:47] A handshake determines how the communication of a protocol starts.

[fn:49] https://tools.ietf.org/html/draft-ietf-tsvwg-sctp-dtls-encaps-09

[fn:50] A list with examples at https://webrtchacks.com/vendor-directory/

[fn:51] https://tools.ietf.org/html/draft-manyfolks-gaia-community-networks-02

[fn:52] https://trac.tools.ietf.org/group/irtf/trac/wiki/gaia

[fn:53] https://irtf.org/gaia

[fn:54] https://drupal.org

[fn:55] https://www.ubnt.com/

[fn:56] http://www.mikrotik.com/

[fn:57] https://qmp.cat

[fn:58] http://libre-mesh.org/

[fn:59] http://bmx6.net/projects/bmx6

[fn:60] http://www.open-mesh.org/projects/batman-adv/wiki

[fn:61] https://openwrt.org/

[fn:62] http://fundacio.guifi.net/index.php/Foundation

[fn:63] International Telecommunication Union. ITU-T Recommendation G.114 http://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-G.114-200305-I!!PDF-E

