* [DRAFT] user cases
** brainstorm
*** iteration 1 (general)
- *VoIP*
  - Backward compatibility with PSTN
  - http://en.wikipedia.org/wiki/E.164#DNS_mapping_of_E.164_numbers [ENUM]
    - If the user pays use a PSTN number. Calls inside the network + outside (gateway use).
    - If the user doesnâ€™t pay use a internal number. Only calls inside the network.
  - silly SIP clients (grandstream, etc): PSTN -> SIP
  - Asterisk PBX -> SIP
  - Professional usage capabilities: recommend a famous platform? kamailio, asterisk, freeswitch? or integrated solutions as sipwise?
    - User management interface
    - Billing platform for paid services
    - ...
  - Centralised / Decentralised: some clients can use the same SIP Proxy to delegate configuration stuff to an organization (and the organization monitor the calls, fees, etc.). And other clients can use its own configuration.
  - Gateway balancing
- *Federation*: easy federation between organizations. Towards autodiscovery way?
- *Privacy*
  - the user can select easily what services are available for public/private/null use
  - encryption always enabled
- *Videocalls*: build similar to skype/google hangout?
- *Chat/instant messaging*: build similar to whatsapp?
- Streaming: client sends audiovisual stream to a server that manages all requests to see the video (p2p/cdn model?)
*** iteration 2 (general)
- *generic idea*: client/server contact list application (hangout/whatsapp style), as infrastructure to webrtc applications
- *contact list*, user can
  - register (user, password). Deregister. User have unique ID.
  - be
    - public: all user can see him in that server and all servers (interesting to have a blacklist of servers and/or persons)
    - local: it will be seen by the users of the same server
    - private: to see him, you require to know his ID
  - privacy level
    - share or not the information state (connected, busy, away, disconnected, [invented state])
    - if is required or not a request for communication
  - add other user through its name / ID / server. Can search, can check.
  - examples:
    - public user, shares state information, not need request for communication
      - enterprise / freelance / professional, easy contact with clients or potential clients
      - a sensor or machine that can communicate through WebRTC
    - private user, user that wants to be in contact with few people that knows
- *webrtc compatibility*: each webrtc service should be easy to add
*** iteration 3 - bidirectional conference, specific
**** basic use case defined
***** Core functions
- A user can receive a call only if remain connected to the service
  with at least one device.
  - Access to the service
  - Authenticated
  - Wait random time until receive a call. If there are more devices of the same user, all of them receive the call, but only one can accept it.
  - Accept the call
  - Communicate (bidirectional)
  - Stop the communication (one of the two users have to stop it)
- A user can call another user through videocall or audiocall with chat features
  - Access the service
  - Authenticate
  - Put the other user's name, try a call
  - The other user has to accept it to continue
  - Communicate (bidirectional)
  - Stop the communication (one of the two users have to stop it)
***** Social functions
- A user can see the status of another user with its contact list if the allows it.
- With the contact list a user can add/remove another user
**** guifi.net integration (to review)
***** Core functions
- A user can connect to a server if he could reach it with good quality, if not, he can easily install it in its zone.
- If a server reach another, the users of a server can communicate to the users of another server.
***** Helper functions
- The server has guifi DNS resolution, so the users can access it easily
  - internal: using DNS servers inside guifi
  - external: using the DNS server of guifi.net foundation
- In the case that the user can choose a server, he can see easily (geolocalization or quality metric) what is the best server to use
**** extension (not approved)
***** Core functions
- IRC / XMPP service way
  - A user can be in a public place where there are rooms and people talk openly
  - A user can speak privately to the users connected to this place
- A user can start a "bidirectional conference" with another user if he knows his name.
***** Social functions
- User can share files of limited size in a rome or privately to a another user
- User can set its own photo, nickname and description
- Users can set if a rooms is able to record a history conversation (and files) such that users that connect and disconnect can follow the conversation
- Users can create private rooms to discuss topics
  - can add/remove other users
- Users can delete or request deletion to the admin of information: chat conversations or files.
